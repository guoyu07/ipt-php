<?php
/*
 *      iptables.php
 *      
 *      Copyright 2012 Andrea Crisafulli <xanio@grayhats.org>
 *      
 *      This program is free software; you can redistribute it and/or modify
 *      it under the terms of the GNU General Public License as published by
 *      the Free Software Foundation; either version 2 of the License, or
 *      (at your option) any later version.
 *      
 *      This program is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *      GNU General Public License for more details.
 *      
 *      You should have received a copy of the GNU General Public License
 *      along with this program; if not, write to the Free Software
 *      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 *      MA 02110-1301, USA.
 *      
 *      
 */

class iptables
{

	/**
	 * Constructor of class iptables.
	 *
	 * @return void
	 */
	public function __construct()
	{
		// ...
	}

	// Gestione nat 1:1
	public function addNat($value) {
		$sql="INSERT INTO ipt_nat (id_tables, ip_pubb, ip_priv)
				VALUES
				('".$value['id_tables']."','".$value['ip_pubb']."','".$value['ip_priv']."')";


			if (!mysql_query($sql))
				  {
			  die('Error: ' . mysql_error());
		  }

		//print_r($sql);
		echo "Added new nat 1:1 rules ".$value['ip_pubb']." -> ".$value['ip_priv']."<br />";
		
	}
	
	public function remNat($id){
		$sql="DELETE FROM ipt_nat where id_nat =  '".$id."'";
				//die(print_r($sql));

			if (!mysql_query($sql))
			  {
			  die('Error: ' . mysql_error());
			  }

		//print_r($sql);
		echo "Remove nat 1:1 with id ".$id."";
	
	}
	
	public function modNat($id,$value){
		$sql="update ipt_nat set ip_pubb = '".$value['ip_pubb']."', ip_priv = '".$value['ip_priv']."' where id_nat =  '".$id."'";
				//die(print_r($sql));

			if (!mysql_query($sql))
			  {
			  die('Error: ' . mysql_error());
			  }

		echo "Mod nat 1:1 rules ".$value['ip_pubb']." -> ".$value['ip_priv']."<br />";
	
	}
	
	public function addMasq($value){
/*
		il masquarade viene applicato sulla catena di POSTROUTING e si ha la possibilit√† di impostarlo su una interfaccia di output
		oppure dedicere di applicarlo ad una determinata source nat e farla mascherare con altra network
		RICORDA la netmask associata al comenaod deve essere in notazione CDIR
*/
		
		//prelievo l'id della chain corretta:
		$sql_chain = "SELECT id_tables from ipt_table WHERE name = 'nat' AND chain = 'POSTROUTING'";
		$value['id_tables'] = mysql_query($sql_chain);
		
		if(isset($value['masq_network']) && isset($value['masq_netmask']) && isset($value['masq_network2']) && isset($value['masq_network2']))
		{
			$sql="INSERT INTO ipt_masq (masq_interface,masq_network,masq_netmask,masq_network2,masq_netmask2,id_tables)
					VALUES
					('".$value['masq_interface']."','".$value['masq_network']."','".$value['masq_netmask']."','".$value['masq_network2']."','".$value['masq_netmask2']."','".$value['id_tables']."')";

		} else {
			$sql="INSERT INTO ipt_masq (masq_interface,id_tables) VALUES ('".$value['masq_interface']."','".$value['id_tables']."')";
			
			}

			if (!mysql_query($sql))
				  {
			  die('Error: ' . mysql_error());
		  }

		//print_r($sql);
		echo "Added new masquarade rules ".$value['masq_interface']."<br />";
		}
	
	public function modMasq($id,$value){
		if(isset($value['masq_network']) && isset($value['masq_netmask']) && isset($value['masq_network2']) && isset($value['masq_network2']))
		{
		$sql="UPDATE ipt_masq set masq_interface = '".$value['masq_interface']."',
									masq_network = '".$value['masq_network']."',
									masq_netmask = '".$value['masq_netmask']."',
									masq_network2 = '".$value['masq_network2']."',
									masq_netmask2 = '".$value['masq_netmask2']."',
									id_tables = '".$value['id_tables']."'
									WHERE id_masq='".$id."')";
			} else {
			$sql="UPDATE ipt_masq set masq_interface = '".$value['masq_interface']."',
									id_tables = '".$value['id_tables']."'
									WHERE id_masq='".$id."')";
			
			}

			if (!mysql_query($sql))
				  {
			  die('Error: ' . mysql_error());
		  }

		//print_r($sql);
		echo "MOD masquarade rules with id ".$id."<br />";
		}
		
	public function remMasq($id){
		$sql="DELETE FROM ipt_masq where id_nat =  '".$id."'";
				//die(print_r($sql));

		if (!mysql_query($sql))
		  {
			die('Error: ' . mysql_error());
		  }

		//print_r($sql);
		echo "Remove masquarade rules with id ".$id."";
		}

	public function genIpt(){
		$output = "# Generated by ipt-php
*mangle
";
$query="SELECT * from ipt_table where name = 'mangle'";
$resmangle=mysql_query($query);
while ($rsMangle = mysql_fetch_assoc($resmangle)){
	/*
						$rsMangle['id_tables']	<- contiene l'id
						$rsMangle['name']		<- contiene il nome della tabella
						$rsMangle['chain']		<- contiene il nome della chain
						$rsMangle['policy']		<- contiene la policy di default
*/
	$output.= ":".$rsMangle['chain']." ".$rsMangle['policy']."\n";	// <- es => :POSTROUTING ACCEPT
	}
$output.= "COMMIT
# Completed
# Generated by ipt-php
*nat\n";
					$sql="SELECT * from ipt_table where name = 'nat'";
					$result=mysql_query($sql);
					while ($rsTables = mysql_fetch_assoc($result)){
/*
						$rsTables['id_tables']	<- contiene l'id
						$rsTables['name']		<- contiene il nome della tabella
						$rsTables['chain']		<- contiene il nome della chain
						$rsTables['policy']		<- contiene la policy di default
*/
					$output.= ":".$rsTables['chain']." ".$rsTables['policy']."\n";	// <- es => :POSTROUTING ACCEPT
					}
					$query2="SELECT * from ipt_table where name = 'nat'";
					$result2=mysql_query($query2);
					while ($rsTabless = mysql_fetch_assoc($result2)){
/*
						$rsTabless['id_tables']	<- contiene l'id
						$rsTabless['name']		<- contiene il nome della tabella
						$rsTabless['chain']		<- contiene il nome della chain
						$rsTabless['policy']		<- contiene la policy di default
*/
						$sqlnat="SELECT * from ipt_nat where id_tables = ".$rsTabless['id_tables']."";
						$resultnat=mysql_query($sqlnat);
						while ($rsNat = mysql_fetch_assoc($resultnat)){
/*
								$rsNat['id_nat']	<- contiene l'id
								$rsNat['ip_pubb']	<- contiene l'ip pubblico
								$rsNat['ip_priv']	<- contiene l'ip privato
								$rsNat['id_tables'] <- contine l'id della chain / tabella di appartenenza
*/
							if ($rsTabless['chain'] =='PREROUTING') {
							$output.= "-A ".$rsTabless['chain']." -d ".$rsNat['ip_pubb']."/32 -j DNAT --to-destination ".$rsNat['ip_priv']."\n";	
							// <- es => -A PREROUTING -d 1.1.1.1/32 -j DNAT --to-destination 192.168.1.5
							}
							if ($rsTabless['chain'] =='POSTROUTING') {
								$output.= "-A ".$rsTabless['chain']." -s ".$rsNat['ip_priv']."/32 -j SNAT --to-source ".$rsNat['ip_pubb']."\n";
								// <- es => -A POSTROUTING -s 192.168.1.5/32 -j SNAT --to-source 1.1.1
								}
							}
						$sqlpf="SELECT * from ipt_pf where id_tables = ".$rsTabless['id_tables']."";
						$resultpf=mysql_query($sqlpf);
						while ($rsPF = mysql_fetch_assoc($resultpf)){
/*
								$rsPF['id_pf']			<- contiene l'id
								$rsPF['pf_destination']	<- contiene l'ip di destinazione (di default NULL)
								$rsPF['pf_invert']		<- contine 1 per invertire la rules di destination, default 0
								$rsPF['pf_interface']	<- contiene l'interface
								$rsPF['pf_protocol']	<- contiene il protocollo usato
								$rsPF['pf_port'] 		<- contine port su cui applicare il forward
								$rsPF['pf_dnat']		<- contine l'ip di destinazione
								$rsPF['pf_dport']		<- contiene la porta di destinazione
								$rsPF['id_tables']		<- contiene l'id della tabella chain
*/
						if ($rsTabless['chain'] =='PREROUTING') {
							if (isset($rsPF['pf_destination'])){
								if($rsPF['pf_invert'] == '1'){
									$output.= "-A ".$rsTabless['chain']." ! -d ".$rsPF['pf_destination']."/32 -i ".$rsPF['pf_interface']." -p ".$rsPF['pf_protocol']." -m ".$rsPF['pf_protocol']." --dport ".$rsPF['pf_port']." -j DNAT --to-destination ".$rsPF['pf_dnat'].":".$rsPF['pf_dport']."\n";
									} else
									$output.= "-A ".$rsTabless['chain']." -d ".$rsPF['pf_destination']."/32 -i ".$rsPF['pf_interface']." -p ".$rsPF['pf_protocol']." -m ".$rsPF['pf_protocol']." --dport ".$rsPF['pf_port']." -j DNAT --to-destination ".$rsPF['pf_dnat'].":".$rsPF['pf_dport']."\n";
								}
							else {
							$output.= "-A ".$rsTabless['chain']." -i ".$rsPF['pf_interface']." -p ".$rsPF['pf_protocol']." -m ".$rsPF['pf_protocol']." --dport ".$rsPF['pf_port']." -j DNAT --to-destination ".$rsPF['pf_dnat'].":".$rsPF['pf_dport']."\n";	
							// <- es => -A PREROUTING -d 1.1.1.1/32 -j DNAT --to-destination 192.168.1.5
							}
							}
						}
						$sqlmasq="SELECT * from ipt_masq where id_tables = ".$rsTabless['id_tables']."";
						//die(print_r($sqlmasq));
						$resultmasq=mysql_query($sqlmasq);
						while ($rsMasq = mysql_fetch_assoc($resultmasq)){
							
							if (isset($rsMasq['masq_network']) && isset($rsMasq['masq_netmask']) && isset($rsMasq['masq_network2']) && isset($rsMasq['masq_netmask2'])){
								$output.="";
							}
						else {
							$output.="-A ".$rsTabless['chain']." -o ".$rsMasq['masq_interface']." -j MASQUERADE\n";
							}
							
					}
					}

					
					$output.="COMMIT
# Completed
# Generated by ipt-php
*filter\n";
					$sql="SELECT * from ipt_table where name = 'filter'";
					$result=mysql_query($sql);
					while ($rsTables = mysql_fetch_assoc($result)){
/*
						$rsTables['id_tables']	<- contiene l'id
						$rsTables['name']		<- contiene il nome della tabella
						$rsTables['chain']		<- contiene il nome della chain
						$rsTables['policy']		<- contiene la policy di default
*/
					$output.= ":".$rsTables['chain']." ".$rsTables['policy']."\n";	// <- es => :POSTROUTING ACCEPT
					}
					$sql_log="SELECT * from ipt_log";
					$result_log=mysql_query($sql_log);
					while ($rsLog = mysql_fetch_assoc($result_log)){
/*
						$rsLog['id_log']			<- contiene l'id
						$rsLog['log_name']			<- contiene il nome del log
						$rsLog['log_prefix']		<- contiene il nome del prefisso desiderato con l'aggiunta di IPTABLES_
						$rsLog['log_level']			<- contiene il livello di log desiderato
						$rsLog['log_tcp_options']	<- contiene 1 se attivo l'opzione tcp dei log (default 0)
						$rsLog['log_ip_options']	<- contiene 1 se attivo l'opzione ip dei log (default 0)
*/
					$output.= ":".$rsLog['log_name']." - \n";	// <- es => :POSTROUTING ACCEPT
					}
					$output.="-A INPUT -i eth1 -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -i eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i eth0 -j ACCEPT
-A INPUT -j LOG
-A INPUT -j DROP
-A FORWARD -i eth0 -j LOG_FORWARD_USCITA
-A FORWARD -i eth1 -j LOG_FORWARD_INGRESSO
-A FORWARD -i eth0 -j ACCEPT
-A OUTPUT -o lo -j ACCEPT
-A OUTPUT -o eth0 -j ACCEPT
$sql_log="SELECT * from ipt_log";
					$result_log=mysql_query($sql_log);
					while ($rsLog = mysql_fetch_assoc($result_log)){
/*
						$rsLog['id_log']			<- contiene l'id
						$rsLog['log_name']			<- contiene il nome del log
						$rsLog['log_prefix']		<- contiene il nome del prefisso desiderato con l'aggiunta di IPTABLES_
						$rsLog['log_level']			<- contiene il livello di log desiderato
						$rsLog['log_tcp_options']	<- contiene 1 se attivo l'opzione tcp dei log (default 0)
						$rsLog['log_ip_options']	<- contiene 1 se attivo l'opzione ip dei log (default 0)
*/
					$output.= "-A ".$rsLog['log_name']." -j LOG --log-prefix ipt_".$rsLog['log_prefix']." --log-level ".$rsLog['log_level']." " . ( $rsLog['log_tcp_options'] == '1' ? "--log-tcp-options" : "" ) . " " . ( $rsLog['log_ip_options'] == '1' ? "--log-ip-options" : "" ) ."\n";	// <- es => :POSTROUTING ACCEPT
					}
$output.="COMMIT
# Completed";	
					
					return $output;

				}


		}
